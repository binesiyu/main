" util {{{
scriptencoding utf-8
" man.vim: invoked by :Man {name}
" source $VIMRUNTIME/ftplugin/man.vim
" matchit
source $VIMRUNTIME/macros/matchit.vim

Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'Shougo/vimproc'

let g:vim_wildignore
      \ = '*/tmp/*,*.so,*.swp,*.zip,*.class,tags,*.jpg,
      \*.ttf,*.TTF,*.png,*/target/*,*/.exvim*/*,
      \.git,.svn,.hg,.DS_Store,*.svg'

fu! Generate_ignore(ignore,tool, ...) abort
    let ignore = []
    if a:tool ==# 'ag'
        for ig in split(a:ignore,',')
            call add(ignore, '--ignore')
            call add(ignore, "'" . ig . "'")
        endfor
    elseif a:tool ==# 'rg'
        for ig in split(a:ignore,',')
            call add(ignore, '-g')
            if a:0 > 0
                call add(ignore, "'!" . ig . "'")
            else
                call add(ignore, '!' . ig)
            endif
        endfor
    endif
    return ignore
endf
"}}}

" ui {{{
Plugin 'mhinz/vim-startify'
let g:startify_custom_header = [
        \ '',
        \ '',
        \ '                                     VVVVVVVV           VVVVVVVVIIIIIIIIIIMMMMMMMM               MMMMMMMM     ',
        \ '                                     V::::::V           V::::::VI::::::::IM:::::::M             M:::::::M     ',
        \ '                                     V::::::V           V::::::VI::::::::IM::::::::M           M::::::::M     ',
        \ '                                     V::::::V           V::::::VII::::::IIM:::::::::M         M:::::::::M     ',
        \ '                                      V:::::V           V:::::V   I::::I  M::::::::::M       M::::::::::M     ',
        \ '                                       V:::::V         V:::::V    I::::I  M:::::::::::M     M:::::::::::M     ',
        \ '                                        V:::::V       V:::::V     I::::I  M:::::::M::::M   M::::M:::::::M     ',
        \ '                                         V:::::V     V:::::V      I::::I  M::::::M M::::M M::::M M::::::M     ',
        \ '                                          V:::::V   V:::::V       I::::I  M::::::M  M::::M::::M  M::::::M     ',
        \ '                                           V:::::V V:::::V        I::::I  M::::::M   M:::::::M   M::::::M     ',
        \ '                                            V:::::V:::::V         I::::I  M::::::M    M:::::M    M::::::M     ',
        \ '                                             V:::::::::V          I::::I  M::::::M     MMMMM     M::::::M     ',
        \ '                                              V:::::::V         II::::::IIM::::::M               M::::::M     ',
        \ '                                               V:::::V          I::::::::IM::::::M               M::::::M     ',
        \ '                                                V:::V           I::::::::IM::::::M               M::::::M     ',
        \ '                                                 VVV            IIIIIIIIIIMMMMMMMM               MMMMMMMM     ',
        \ '',
        \ '',
        \ ]
let g:startify_session_dir = $HOME .  '/.data/' . ( has('nvim') ? 'nvim' : 'vim' ) . '/session'
let g:startify_files_number = 6
let g:startify_list_order = [
      \ ['   These are my bookmarks:'],
      \ 'bookmarks',
      \ ['   My most recently used files in the current directory:'],
      \ 'dir',
      \ ['   My most recently used files:'],
      \ 'files',
      \ ['   These are my sessions:'],
      \ 'sessions',
      \ ]
let g:startify_bookmarks = [{'c' : '~/Documents/dev/kingdom-of-heaven-client/koh.exvim'},
            \ {'k': '~/Documents/dev/kingdom-of-heaven-client/koh-c.exvim'}, 
            \'~/.vimrc',
            \'~/.vimrc.plugins',
            \'~/.zshrc',
            \]
let g:startify_update_oldfiles = 1
" let g:startify_disable_at_vimenter = 1
let g:startify_session_autoload = 1
let g:startify_session_persistence = 1
"let g:startify_session_delete_buffers = 0
let g:startify_change_to_dir = 0
" let g:startify_padding_left = 3
"let g:startify_change_to_vcs_root = 0  " vim-rooter has same feature
let g:startify_skiplist = [
      \ 'COMMIT_EDITMSG',
      \ escape(fnamemodify(resolve($VIMRUNTIME), ':p'), '\') .'doc',
      \ 'bundle/.*/doc',
      \ ]

"Plugin 'rhysd/conflict-marker.vim'
"Plugin 'jiangmiao/auto-pairs'
Plugin 'terryma/vim-multiple-cursors'
" Plugin 'vim-scripts/sessionman.vim'
" nmap <leader>sl :SessionList<CR>
" nmap <leader>ss :SessionSave<CR>
" nmap <leader>sc :SessionClose<CR>
Plugin 'nathanaelkane/vim-indent-guides'
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['nerdtree','help', 'man', 'startify', 'vimfiler']
" }}}

" incsearch {{{
  Plugin 'haya14busa/incsearch.vim'
  Plugin 'haya14busa/incsearch-fuzzy.vim'
  Plugin 'haya14busa/vim-asterisk'
  Plugin 'osyo-manga/vim-over'
  Plugin 'haya14busa/incsearch-easymotion.vim'
  let g:incsearch#auto_nohlsearch = 1
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
  " map n  <Plug>(incsearch-nohl-n)
  " map N  <Plug>(incsearch-nohl-N)
  map *  <Plug>(incsearch-nohl-*)
  map #  <Plug>(incsearch-nohl-#)
  map g* <Plug>(incsearch-nohl-g*)
  map g# <Plug>(incsearch-nohl-g#)
  map z/ <Plug>(incsearch-easymotion-/)
  map z? <Plug>(incsearch-easymotion-?)
  map zg/ <Plug>(incsearch-easymotion-stay)
  function! s:config_easyfuzzymotion(...) abort
      return extend(copy({
                  \   'converters': [incsearch#config#fuzzy#converter()],
                  \   'modules': [incsearch#config#easymotion#module()],
                  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
                  \   'is_expr': 0,
                  \   'is_stay': 1
                  \ }), get(a:, 1, {}))
  endfunction

  noremap <silent><expr> <leader>/ incsearch#go(<SID>config_easyfuzzymotion())
" }}}

" textobj {{{
Plugin 'kana/vim-textobj-user'
Plugin 'kana/vim-textobj-indent'
Plugin 'reedes/vim-textobj-sentence'
augroup textobj_sentence
  autocmd!
  autocmd FileType markdown call textobj#sentence#init()
  autocmd FileType textile call textobj#sentence#init()
  autocmd FileType text call textobj#sentence#init()
augroup END

Plugin 'reedes/vim-textobj-quote'
augroup textobj_quote
    autocmd!
    autocmd FileType markdown call textobj#quote#init()
    autocmd FileType textile call textobj#quote#init()
    autocmd FileType text call textobj#quote#init({'educate': 0})
augroup END

Plugin 'gcmt/wildfire.vim'
let g:wildfire_objects = {
            \ "*" : ["i'", 'i"', "i)", "i]", "i}", "ip"],
            \ "html,xml" : ["at"],
            \ }
" }}}

" ctrlp {{{
let g:plug_ctrlp = 1
if exists('g:plug_ctrlp')
    " ctrlp: invoke by <ctrl-p>
    Plugin 'kien/ctrlp.vim'
    Plugin 'tacahiroy/ctrlp-funky'
    Plugin 'jasoncodes/ctrlp-modified.vim'
    let g:ctrlp_working_path_mode = ''
    let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:10'
    let g:ctrlp_follow_symlinks = 2
    let g:ctrlp_custom_ignore = {
                \ 'dir':  '\.git$\|\.hg$\|\.svn$',
                \ 'file':  '\v(\.cpp|\.h|\.hh|\.cxx|\.lua|\.c)@<!$'}
    let g:ctrlp_reuse_window = 'exproject\|nerdtree\|netrw\|help\|quickfix'
    let g:ctrlp_by_filename = 1
    let g:ctrlp_switch_buffer = ''
    " CtrlP extensions
    let g:ctrlp_extensions = ['funky']
    let g:ctrlp_use_caching = 1
    let g:ctrlp_clear_cache_on_exit = 0
    if executable('rg') && !exists('g:ctrlp_user_command')
        let g:ctrlp_user_command = 'rg %s --no-ignore --hidden --files -g "" '
                    \ . join(Generate_ignore(g:vim_wildignore,'rg', 1))
    endif

    " let g:ctrlp_cmd = 'CtrlPBuffer'
    "funky
    nnoremap <Leader>fm :CtrlPModified<CR>
    nnoremap <Leader>fg :CtrlPBranch<CR>
    nnoremap <Leader>fu :CtrlPFunky<Cr>
    nnoremap <leader>fb :CtrlPBuffer<CR>
    " nnoremap <leader>ff :CtrlP<CR>
    nnoremap <leader>fr :CtrlPMRU<CR>
    nnoremap <leader>fl :CtrlPMRUFiles<CR>
    nnoremap <leader>fa :Ack<CR>
endif
" }}}

" denite {{{
let g:plug_denite = 1
if exists('g:plug_denite')
    " Plugin 'Shougo/denite.nvim',{ 'merged' : 0,'lazy' : 0}
    Plugin 'Shougo/denite.nvim'
    if !dein#check_install('denite.nvim')
        " denite option
        let s:denite_options = {
                    \ 'default' : {
                    \ 'winheight' : 10,
                    \ 'mode' : 'insert',
                    \ 'quit' : 'true',
                    \ 'highlight_matched_char' : 'MoreMsg',
                    \ 'highlight_matched_range' : 'MoreMsg',
                    \ 'direction': 'rightbelow',
                    \ 'statusline' : has('patch-7.4.1154') ? v:false : 0,
                    \ 'prompt' : 'âž­',
                    \ 'cursor_pos' : '$',
                    \ }}

        function! s:profile(opts) abort
            for fname in keys(a:opts)
                for dopt in keys(a:opts[fname])
                    call denite#custom#option(fname, dopt, a:opts[fname][dopt])
                endfor
            endfor
        endfunction

        call s:profile(s:denite_options)

        " buffer source
        call denite#custom#var(
                    \ 'buffer',
                    \ 'date_format', '%m-%d-%Y %H:%M:%S')

        " denite command
        " For ripgrep
        call denite#custom#var('file_rec', 'command',
                    \ ['rg', '--hidden', '--files', '--glob', '!.git', '--glob', '']
                    \ + Generate_ignore(g:vim_wildignore, 'rg')
                    \ )

        call denite#custom#alias('source', 'file_rec/git', 'file_rec')
        call denite#custom#var('file_rec/git', 'command',
                    \ ['git', 'ls-files', '-co', '--exclude-standard'])
        " Ripgrep command on grep source
        call denite#custom#var('grep', 'command', ['rg'])
        call denite#custom#var('grep', 'default_opts',
                    \ ['--vimgrep', '--no-heading'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'final_opts', [])
        " KEY MAPPINGS
        let s:insert_mode_mappings = [
                    \  ['<C-J>', '<denite:move_to_next_line>', 'noremap'],
                    \  ['<C-K>', '<denite:move_to_previous_line>', 'noremap'],
                    \  ['<C-N>', '<denite:assign_next_matched_text>', 'noremap'],
                    \  ['<C-P>', '<denite:assign_previous_matched_text>', 'noremap'],
                    \  ['<Esc>', '<denite:enter_mode:normal>', 'noremap'],
                    \  ['<Up>', '<denite:assign_previous_text>', 'noremap'],
                    \  ['<Down>', '<denite:assign_next_text>', 'noremap'],
                    \  ['<C-Y>', '<denite:redraw>', 'noremap'],
                    \ ]

        " \ ['<Tab>', '<denite:move_to_next_line>', 'noremap'],
        " \ ['<S-tab>', '<denite:move_to_previous_line>', 'noremap'],
        let s:normal_mode_mappings = [
                    \   ["'", '<denite:toggle_select_down>', 'noremap'],
                    \   ['<C-n>', '<denite:jump_to_next_source>', 'noremap'],
                    \   ['<C-p>', '<denite:jump_to_previous_source>', 'noremap'],
                    \   ['gg', '<denite:move_to_first_line>', 'noremap'],
                    \   ['st', '<denite:do_action:tabopen>', 'noremap'],
                    \   ['sg', '<denite:do_action:vsplit>', 'noremap'],
                    \   ['sv', '<denite:do_action:split>', 'noremap'],
                    \   ['q', '<denite:quit>', 'noremap'],
                    \   ['r', '<denite:redraw>', 'noremap'],
                    \   ['<Esc>', '<denite:quit>', 'noremap'],
                    \ ]

        for s:m in s:insert_mode_mappings
            call denite#custom#map('insert', s:m[0], s:m[1], s:m[2])
        endfor
        for s:m in s:normal_mode_mappings
            call denite#custom#map('normal', s:m[0], s:m[1], s:m[2])
        endfor

        unlet s:m s:insert_mode_mappings s:normal_mode_mappings


        nnoremap <leader>fd :Denite file_rec<CR>
        " nnoremap <leader>fb :Denite buffer<CR>
        nnoremap <leader>fg :Denite grep<CR>
        nnoremap <leader>fc :DeniteCursorWord grep<CR>
    endif
endif
" }}}

" unite {{{
let g:plug_unite = 1
if exists('g:plug_unite')
    " Plugin  'Shougo/unite.vim',{ 'merged' : 0 }
    Plugin  'Shougo/unite.vim'
    Plugin  'Shougo/neomru.vim'
    if !dein#check_install('unite.vim')
        call unite#filters#matcher_default#use(['matcher_fuzzy'])
        call unite#filters#sorter_default#use(['sorter_rank'])
        call unite#custom#profile('default', 'context', {
                    \   'safe': 0,
                    \   'start_insert': 1,
                    \   'ignorecase' : 1,
                    \   'short_source_names': 1,
                    \   'update_time': 200,
                    \   'direction': 'rightbelow',
                    \   'winwidth': 40,
                    \   'winheight': 10,
                    \   'max_candidates': 100,
                    \   'no_auto_resize': 1,
                    \   'vertical_preview': 1,
                    \   'cursor_line_time': '0.10',
                    \   'hide_icon': 0,
                    \   'candidate-icon': ' ',
                    \   'marked_icon': 'âœ“',
                    \   'prompt' : 'âž­ '
                    \ })
        call unite#custom#profile('source/neobundle/update', 'context', {
                    \   'start_insert' : 0,
                    \ })

        let g:unite_source_buffer_time_format = get(g:,
                    \ 'unite_source_buffer_time_format', '(%m-%d-%Y %H:%M:%S) ')
        let g:unite_split_rule = get(g:, 'unite_split_rule', 'botright')
        let g:unite_winheight = get(g:, 'unite_winheight', 25)

        nnoremap <silent><leader>fm  :<C-u>Unite -start-insert mapping<CR>
    endif


    function! Vimfiler_init() abort
        let g:vimfiler_as_default_explorer = get(g:, 'vimfiler_as_default_explorer', 1)
        let g:vimfiler_restore_alternate_file = get(g:, 'vimfiler_restore_alternate_file', 1)
        let g:vimfiler_tree_indentation = get(g:, 'vimfiler_tree_indentation', 1)
        let g:vimfiler_tree_leaf_icon = get(g:, 'vimfiler_tree_leaf_icon', '')
        let g:vimfiler_tree_opened_icon = get(g:, 'vimfiler_tree_opened_icon', 'â–¼')
        let g:vimfiler_tree_closed_icon = get(g:, 'vimfiler_tree_closed_icon', 'â–º')
        let g:vimfiler_file_icon = get(g:, 'vimfiler_file_icon', '')
        let g:vimfiler_readonly_file_icon = get(g:, 'vimfiler_readonly_file_icon', '*')
        let g:vimfiler_marked_file_icon = get(g:, 'vimfiler_marked_file_icon', 'âˆš')
        let g:vimfiler_direction = get(g:, 'vimfiler_direction', 'rightbelow')
        "let g:vimfiler_preview_action = 'auto_preview'
        let g:vimfiler_ignore_pattern = get(g:, 'vimfiler_ignore_pattern', [
                    \ '^\.git$',
                    \ '^\.DS_Store$',
                    \ '^\.init\.vim-rplugin\~$',
                    \ '^\.netrwhist$',
                    \ '\.class$',
                    \ '^\.'
                    \])

        call vimfiler#custom#profile('default', 'context', {
                    \ 'explorer' : 1,
                    \ 'winwidth' : 30,
                    \ 'winminwidth' : 30,
                    \ 'toggle' : 1,
                    \ 'auto_expand': 1,
                    \ 'direction' : g:vimfiler_direction,
                    \ 'parent': 0,
                    \ 'status' : 1,
                    \ 'safe' : 0,
                    \ 'split' : 1,
                    \ 'hidden': 1,
                    \ 'no_quit' : 1,
                    \ 'force_hide' : 0,
                    \ 'auto_cd' : 1,
                    \ })

        augroup vfinit
            au!
            autocmd FileType vimfiler call s:vimfilerinit()
        augroup END
        function! s:vimfilerinit()
            setl nonumber
            setl norelativenumber

            silent! nunmap <buffer> <Space>
            silent! nunmap <buffer> <C-l>
            silent! nunmap <buffer> <C-j>
            silent! nunmap <buffer> E
            silent! nunmap <buffer> -
            silent! nunmap <buffer> s

            nnoremap <silent><buffer><expr> sg  vimfiler#do_action('vsplit')
            nnoremap <silent><buffer><expr> sv  vimfiler#do_action('split')
            nnoremap <silent><buffer><expr> st  vimfiler#do_action('tabswitch')
            nmap <buffer> gx      <Plug>(vimfiler_execute_vimfiler_associated)
            nmap <buffer> '       <Plug>(vimfiler_toggle_mark_current_line)
            nmap <buffer> v       <Plug>(vimfiler_quick_look)
            nmap <buffer> p       <Plug>(vimfiler_preview_file)
            nmap <buffer> V       <Plug>(vimfiler_clear_mark_all_lines)
            nmap <buffer> i       <Plug>(vimfiler_switch_to_history_directory)
            nmap <buffer> <Tab>   <Plug>(vimfiler_switch_to_other_window)
            nmap <buffer> <C-r>   <Plug>(vimfiler_redraw_screen)
            nmap <buffer> <Left>  <Plug>(vimfiler_smart_h)
            nmap <buffer> <Right> <Plug>(vimfiler_smart_l)
        endf
        noremap <silent> <leader>nv :VimFiler<CR>
    endfunction
    Plugin 'Shougo/vimfiler.vim',{'merged' : 0,'on_cmd' : ['VimFiler', 'VimFilerBufferDir'],'hook_source' : function('Vimfiler_init'), 'on_path': '.*'}
endif
" }}}

" nerdtree {{{
" ---------------------------------------------------
let g:plug_nerdtree = 1
if exists('g:plug_nerdtree')
    Plugin 'scrooloose/nerdtree'
    Plugin 'jistr/vim-nerdtree-tabs'

    let g:NERDTreeWinSize = 30
    let g:NERDTreeMouseMode = 1
    let g:NERDTreeMapToggleZoom = '<Space>' 
    let g:nerdtree_tabs_open_on_gui_startup=0
    let g:nerdtree_tabs_open_on_new_tab=0
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
    map <leader>nn <plug>NERDTreeTabsToggle<CR>
    " map <F2> <plug>NERDTreeTabsToggle<CR>
endif
" }}}

" vim-markdown {{{
Plugin 'plasticboy/vim-markdown'
Plugin 'iamcco/markdown-preview.vim'
if OSX()
    let g:mkdp_path_to_chrome="open -a Google\\ Chrome"
endif
let g:mkdp_auto_close=1
" nmap <F7> <Plug>MarkdownPreview
" nmap <F8> <Plug>StopMarkdownPreview
" }}}

" lint {{{
" syntastic: invoke when you save file and have syntac-checker
" ---------------------------------------------------
" let g:syntastic = 1
if exists('g:syntastic')
    Plugin 'scrooloose/syntastic'
    let g:syntastic_lua_checkers = ["luac", "luacheck"]
    let g:syntastic_lua_luacheck_args = "--no-unused-args" 
    " let g:syntastic_always_populate_loc_list = 1
    " let g:syntastic_auto_loc_list = 1
    let syntastic_error_symbol = 'âœ–'
    let syntastic_warning_symbol = 'âž¤'
    let syntastic_info_symbol = 'ðŸ›ˆ'

    let syntastic_style_error_symbol = 'âœ–'
    let syntastic_style_warning_symbol = 'âž¤'

    if OSX()
        let g:syntastic_lua_luacheck_exec = "~/.luarocks/bin/luacheck"
        " let g:syntastic_lua_luacheck_quiet_messages = {
        " \ "regex": ["accessing undefined variable \'Sora.*","accessing undefined variable \'g.*"]}
    endif

    " this will make html file by Angular.js ignore errors
    let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
    nnoremap <silent> <leader>el :Error<CR>
else
    Plugin 'neomake/neomake'
    " When writing a buffer.
    call neomake#configure#automake('w')
    " 1 open list and move cursor 2 open list without move cursor
    let g:neomake_open_list =  0
    let g:neomake_verbose =  0
    let g:neomake_lua_enabled_makers = ['luacheck']
    let g:neomake_lua_luacheck_exe = expand('~/.luarocks/bin/luacheck')
    let g:neomake_error_sign = get(g:, 'neomake_error_sign', {
                \ 'text': 'âœ–',
                \ })
    let g:neomake_warning_sign = get(g:, 'neomake_warning_sign', {
                \ 'text': 'âž¤',
                \ })
    let g:neomake_info_sign = get(g:, 'neomake_info_sign', {
                \ 'text': 'ðŸ›ˆ',
                \ })
    nnoremap <silent> <leader>el :lopen<CR>
endif

nnoremap <silent> <leader>ec :lclose<CR>
nnoremap <silent> <leader>ee :lnext<CR>
nnoremap <silent> <leader>en :lnext<CR>
nnoremap <silent> <leader>ep :lprevious<CR>
nnoremap <silent> <leader>eN :lNext<CR>
" }}}

" autocomplete {{{
" let g:plug_neocomplete = 1
if exists('g:plug_neocomplete')
    Plugin 'Shougo/neocomplete'
    "Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    " let g:neocomplete#max_list = 10
    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions',
        \ 'lua' : $HOME.'/.vim/bundle/vim-quick-community/key-dict'
            \ }
    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return neocomplete#close_popup() . "\<CR>"
      " For no inserting <CR> key.
      "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplete#close_popup()
    inoremap <expr><C-e>  neocomplete#cancel_popup()
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

    " For cursor moving in insert mode(Not recommended)
    "inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
    "inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
    "inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
    "inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
    " Or set this.
    "let g:neocomplete#enable_cursor_hold_i = 1
    " Or set this.
    "let g:neocomplete#enable_insert_char_pre = 1

    " AutoComplPop like behavior.
    "let g:neocomplete#enable_auto_select = 1

    " Shell like behavior(not recommended).
    "set completeopt+=longest
    "let g:neocomplete#enable_auto_select = 1
    "let g:neocomplete#disable_auto_complete = 1
    "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

    " Called once right before you start selecting multiple cursors
    function! Multiple_cursors_before()
        if exists(':NeoCompleteLock')==2
            exe 'NeoCompleteLock'
        endif
    endfunction

    " Called once only when the multiple selection is canceled (default <Esc>)
    function! Multiple_cursors_after()
        if exists(':NeoCompleteUnlock')==2
            exe 'NeoCompleteUnlock'
        endif
    endfunction
else
    function! Deoplete_init() abort
        " deoplete options
        let g:deoplete#enable_at_startup = get(g:, 'deoplete#enable_at_startup', 1)
        let g:deoplete#enable_ignore_case = get(g:, 'deoplete#enable_ignore_case', 1)
        let g:deoplete#enable_smart_case = get(g:, 'deoplete#enable_smart_case', 1)
        let g:deoplete#enable_camel_case = get(g:, 'deoplete#enable_camel_case', 1)
        let g:deoplete#enable_refresh_always = get(g:, 'deoplete#enable_refresh_always', 1)
        let g:deoplete#max_abbr_width = get(g:, 'deoplete#max_abbr_width', 0)
        let g:deoplete#max_menu_width = get(g:, 'deoplete#max_menu_width', 0)
        " init deoplet option dict
        let g:deoplete#ignore_sources = get(g:,'deoplete#ignore_sources',{})
        let g:deoplete#omni#input_patterns = get(g:,'deoplete#omni#input_patterns',{})
        let g:deoplete#omni_patterns = get(g:, 'deoplete#omni_patterns', {})
        let g:deoplete#keyword_patterns = get(g:, 'deoplete#keyword_patterns', {})
        let g:deoplete#auto_complete_delay = 150

        " sh
        let g:deoplete#ignore_sources.sh = get(g:deoplete#ignore_sources, 'sh', ['around', 'member', 'tag', 'syntax'])

        " go
        let g:deoplete#ignore_sources.go = get(g:deoplete#ignore_sources, 'go', ['omni'])
        call deoplete#custom#set('go', 'mark', '')
        call deoplete#custom#set('go', 'rank', 9999)

        " markdown
        let g:deoplete#ignore_sources.markdown = get(g:deoplete#ignore_sources, 'markdown', ['tag'])

        " perl
        let g:deoplete#omni#input_patterns.perl = get(g:deoplete#omni#input_patterns, 'perl', [
              \'[^. \t0-9]\.\w*',
              \'[^. \t0-9]\->\w*',
              \'[^. \t0-9]\::\w*',
              \])

        " javascript
        "let g:deoplete#omni#input_patterns.javascript = get(g:deoplete#omni#input_patterns, 'javascript', ['[^. \t0-9]\.\w*'])
        let g:deoplete#ignore_sources.javascript = get(g:deoplete#ignore_sources, 'javascript', ['omni'])
        call deoplete#custom#set('ternjs', 'mark', 'tern')
        call deoplete#custom#set('ternjs', 'rank', 9999)

        " typescript
        let g:deoplete#ignore_sources.typescript = get(g:deoplete#ignore_sources, 'typescript', ['tag','omni', 'syntax'])
        call deoplete#custom#set('typescript', 'rank', 9999)
        " gitcommit
        let g:deoplete#omni#input_patterns.gitcommit = get(g:deoplete#omni#input_patterns, 'gitcommit', [
              \'[ ]#[ 0-9a-zA-Z]*',
              \])

        let g:deoplete#ignore_sources.gitcommit = get(g:deoplete#ignore_sources, 'gitcommit', ['neosnippet'])

        " lua
        let g:deoplete#omni_patterns.lua = get(g:deoplete#omni_patterns, 'lua', '.')

        " c c++
        call deoplete#custom#set('clang2', 'mark', '')
        let g:deoplete#ignore_sources.c = get(g:deoplete#ignore_sources, 'c', ['omni'])

        " rust
        let g:deoplete#ignore_sources.rust = get(g:deoplete#ignore_sources, 'rust', ['omni'])
        call deoplete#custom#set('racer', 'mark', '')

        " vim
        let g:deoplete#ignore_sources.vim = get(g:deoplete#ignore_sources, 'vim', ['tag'])

        " clojure
        let g:deoplete#keyword_patterns.clojure = '[\w!$%&*+/:<=>?@\^_~\-\.#]*'
        " neosnippet
        call deoplete#custom#set('neosnippet', 'rank', 99)

        " public settings
        call deoplete#custom#set('_', 'matchers', ['matcher_full_fuzzy'])
        let g:deoplete#ignore_sources._ = get(g:deoplete#ignore_sources, '_', ['around', 'LanguageClient'])
        for key in keys(g:deoplete#ignore_sources)
          if key != '_' && index(keys(get(g:, 'LanguageClient_serverCommands', {})), key) == -1
            let g:deoplete#ignore_sources[key] = g:deoplete#ignore_sources[key] + ['around', 'LanguageClient']
          endif
        endfor
        inoremap <expr><C-h> deoplete#mappings#smart_close_popup()."\<C-h>"
        inoremap <expr><BS> deoplete#mappings#smart_close_popup()."\<C-h>"
        set isfname-==

        " Called once right before you start selecting multiple cursors
        function! Multiple_cursors_before()
            call deoplete#disable()
        endfunction

        " Called once only when the multiple selection is canceled (default <Esc>)
        function! Multiple_cursors_after()
            call deoplete#enable()
        endfunction
    endfunction
    Plugin 'Shougo/deoplete.nvim', {
          \ 'on_event' : 'InsertEnter',
          \ 'hook_source' : function('Deoplete_init'),
          \ 'on_path' : '.*',
          \ }
    if !has('nvim')
      Plugin 'roxma/nvim-yarp',  {'merged': 0}
      Plugin 'roxma/vim-hug-neovim-rpc',  {'merged': 0}
    endif
endif

" " ---------------------------------------------------
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" " ---------------------------------------------------
" completesource
Plugin 'Shougo/neco-syntax',          { 'on_event' : 'InsertEnter'}
Plugin 'Shougo/neopairs.vim',         { 'on_event' : 'InsertEnter'}
Plugin 'Raimondi/delimitMate',        { 'merged' : 0}
" Plugin 'tenfyzhong/CompleteParameter.vim',  {'merged': 0}
" }}}

" snippet {{{
" choose a snippet plugin
Plugin 'Shougo/neosnippet.vim'
Plugin 'Shougo/neosnippet-snippets'
Plugin 'honza/vim-snippets'
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
function! SuperTab() abort
    if getline('.')[col('.')-2] ==# '{'&& pumvisible()
        return "\<C-n>"
    endif
    if neosnippet#expandable() && getline('.')[col('.')-2] ==# '(' && !pumvisible()
        return "\<Plug>(neosnippet_expand)"
    elseif neosnippet#jumpable()
                \ && getline('.')[col('.')-2] ==# '(' && !pumvisible() 
                \ && !neosnippet#expandable()
        return "\<plug>(neosnippet_jump)"
    elseif neosnippet#expandable_or_jumpable() && getline('.')[col('.')-2] !=#'('
        return "\<plug>(neosnippet_expand_or_jump)"
    elseif pumvisible()
        return "\<C-n>"
    elseif complete_parameter#jumpable(1) && getline('.')[col('.')-2] !=# ')'
        return "\<plug>(complete_parameter#goto_next_parameter)"
    else
        return "\<tab>"
    endif
endfunction
imap <expr><TAB> SuperTab()
smap <expr><TAB> SuperTab()
" imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: pumvisible() ? "\<C-n>" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: "\<TAB>"
" }}}

" vim-easymotion {{{
" vim-easymotion: invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/ 
Plugin 'binesiyu/vim-easymotion'
nmap f <Plug>(easymotion-prefix)
nmap ff <Plug>(easymotion-sn)
nmap fj <Plug>(easymotion-j)
nmap fk <Plug>(easymotion-k)
nmap fl <Plug>(easymotion-lineforward)
nmap fh <Plug>(easymotion-linebackward)
nmap f. <Plug>(easymotion-repeat)
nmap fg <Plug>(easymotion-jumptoanywhere)
vmap f <Plug>(easymotion-prefix)
vmap ff <Plug>(easymotion-sn)
vmap fj <Plug>(easymotion-j)
vmap fk <Plug>(easymotion-k)
vmap fl <Plug>(easymotion-lineforward)
vmap fh <Plug>(easymotion-linebackward)
vmap f. <Plug>(easymotion-repeat)
vmap fg <Plug>(easymotion-jumptoanywhere)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
" }}}

" editor {{{

" tabular: invoke by <leader>= alignment-character
" ---------------------------------------------------
Plugin 'godlygeek/tabular'

nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
nmap <Leader>a=> :Tabularize /=><CR>
vmap <Leader>a=> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a,, :Tabularize /,\zs<CR>
vmap <Leader>a,, :Tabularize /,\zs<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
nnoremap <silent> <leader>= :call g:Tabular(1)<CR>
xnoremap <silent> <leader>= :call g:Tabular(0)<CR>
function! g:Tabular(ignore_range) range
    let c = getchar()
    let c = nr2char(c)
    if a:ignore_range == 0
        exec printf('%d,%dTabularize /%s', a:firstline, a:lastline, c)
    else
        exec printf('Tabularize /%s', c)
    endif
endfunction
" nerdcommenter: invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
" ---------------------------------------------------
Plugin 'scrooloose/nerdcommenter'
" Plugin 'tpope/vim-commentary'

let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }
map <F11> <Plug>NERDCommenterAlignBoth
map <C-F11> <Plug>NERDCommenterUncomment

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
" " ---------------------------------------------------
Plugin 'Konfekt/FastFold'
Plugin 'Konfekt/FoldText'

" undotree: invoke by <Leader>u
" ---------------------------------------------------
Plugin 'mbbill/undotree'

nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1
let g:undotree_WindowLayout = 4

" Plugin 'mattn/webapi-vim'
" Plugin 'mattn/gist-vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'

" ex-showmarks: invoke by m... or <leader>mm, <leader>ma
" ---------------------------------------------------
Plugin 'exvim/ex-showmarks'

" TODO: bootleq/ShowMarks on github is well organized in code, but have lots 
" bugs, consider merge his code and fixes the bugs 
let g:showmarks_enable = 1
let g:showmarks_include = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let g:showmarks_ignore_type = 'hqm' " Ignore help, quickfix, non-modifiable buffers
" Hilight lower & upper marks
let g:showmarks_hlline_lower = 1
let g:showmarks_hlline_upper = 0 

highlight clear  ShowMarksHLl " This group is used to highlight all the lowercase marks.
highlight clear  ShowMarksHLu " This group is used to highlight all the uppercase marks.
highlight clear  ShowMarksHLo " This group is used to highlight all other marks.
highlight clear  ShowMarksHLm " This group is used when multiple marks are on the same line.

" ex-visincr: invoke when select text and type ':II'
" ---------------------------------------------------
Plugin 'exvim/ex-visincr'

" searchcompl: invoke by /
" ---------------------------------------------------
Plugin 'exvim/ex-searchcompl'

" vim-color-solarized
" ---------------------------------------------------
Plugin 'altercation/vim-colors-solarized'
Plugin 'morhetz/gruvbox'
" }}}

" lua {{{
Plugin 'xolox/vim-misc'  " required by lua.vim
" Plugin 'xolox/vim-lua-ftplugin'  " Lua file type plug-in for the Vim text editor
Plugin 'binesiyu/vim-lua-ftplugin'  " Lua file type plug-in for the Vim text editor
Plugin 'tbastos/vim-lua'
let g:lua_define_completefunc = 0
let g:lua_define_omnifunc = 0
let g:lua_define_completion_mappings = 0
let lua_version = 5
let lua_subversion = 1
" }}}

" git {{{
" Plugin 'tpope/vim-abolish.git'
Plugin 'junegunn/gv.vim',{ 'on_cmd' : ['GV']}
Plugin 'airblade/vim-gitgutter',{ 'merged' : 0}
Plugin 'lambdalisue/gina.vim',{ 'on_cmd' : 'Gina'}

let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

" nnoremap <silent> <leader>gs :Gina status<CR>
nnoremap <silent> <leader>gi :Gina status<CR>
nnoremap <silent> <leader>gS :Gina add %<CR>
nnoremap <silent> <leader>gU :Gina reset -q %<CR>
nnoremap <silent> <leader>gc :Gina commit<CR>
nnoremap <silent> <leader>gp :Gina push<CR>
nnoremap <silent> <leader>gd :Gina diff<CR>
nnoremap <silent> <leader>gA :Gina add .<CR>
nnoremap <silent> <leader>gb :Gina blame<CR>
nnoremap <silent> <leader>gV :GV!<CR>
nnoremap <silent> <leader>gv :GV<CR>
" }}}

" vim-airline {{{
" ---------------------------------------------------
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

if has('gui_running')
    let g:airline_powerline_fonts = 1
else
    let g:airline_powerline_fonts = 1
endif

" let g:airline_theme = 'powerlineish'
let g:airline#extensions#tabline#enabled = 1 " NOTE: When you open lots of buffers and typing text, it is so slow.
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#fnamemod = ':t'
" let g:airline_section_b = "%{fnamemodify(bufname('%'),':p:.:h').'/'}"
" let g:airline_section_c = '%t'
let g:airline_section_y = 'B:%{bufnr("%")} W:%{winnr()}'
if exists('g:syntastic')
    let g:airline_section_warning = airline#section#create(['syntastic'])
else
    let g:airline_section_warning = airline#section#create(['neomake'])
endif
" }}}

" ex {{{
let g:exlib = 1
if exists('g:exlib')
    if exists('g:exvim_custom_path')
        let vimrc_plugins_ex = g:exvim_custom_path.'/.vimrc.ex'
    else
        let vimrc_plugins_ex = '~/.vimrc.ex'
    endif

    if filereadable(expand(vimrc_plugins_ex))
        exec 'source ' . fnameescape(vimrc_plugins_ex)
    endif
else
    if v:version >= 703
        set acd " no autochchdir
    endif
endif
" }}}

" haskell {{{
" let g:haskell = 1
if exists('g:haskell')
    if exists('g:exvim_custom_path')
        let vimrc_plugins_haskell = g:exvim_custom_path.'/.vimrc.haskell'
    else
        let vimrc_plugins_haskell = '~/.vimrc.haskell'
    endif

    if filereadable(expand(vimrc_plugins_haskell))
        exec 'source ' . fnameescape(vimrc_plugins_haskell)
    endif
endif
"}}}

" vim:ts=4:sw=4:sts=4 et fdm=marker:
